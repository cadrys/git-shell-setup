#!/bin/bash

#usage: git find-merge [-s | --short] [-l | --long]
#           <commit> [<branch>]
#
# Find the merge commit (or commit) when a given commit was merged
# into current or given branch.

# Find the 1st common commit from bottom within first-parent commits
# and ancestry-path commits.
#
# See http://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
#
# First-parent commits are the merge commits made on given branch
# since the given commit is forked.
#
# Ancestry-path commits are the reachable (child) commits from given
# commit to the given branch (opposite direction). For aaed483..dev
# with --ancestry-path the commits 239bc1e and below are excluded as 
# they are not reachable (child) from aaed483.
# 
# *   09a7851 (dev)
# |\    Merge branch 'master' into dev
# | *   ba5eacd (master)
# | |\    Merge branch 'license'
# | | * 44c8a29
# | |/    Add license
# | *   aaed483
# | |\    Merge branch 'dev'
# | * \   9e4255f
# | |\ \    Merge branch 'dev'
# * | \ \   239bc1e
# |\ \ \ \    Merge branch 'hooks' into dev
# 

while true; do
	case "$1" in
		-h ) print-file-comments "$0"; exit ;;
		-s | --short)
			formatOption="short"; shift ;;
		-l | --long )
			formatOption="long"; shift ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
		* )
			break ;;
	esac
done

if [[ "$formatOption" == "short" ]]; then
	format="--pretty=format:%h"
fi
if [[ "$formatOption" == "long" ]]; then
	format="--pretty=format:%H"
fi

commit=$1
if [ -z $commit ]; then
	echo 1>&2 "fatal: commit is required"
	exit 1
fi
commit=$(git rev-parse $commit)
branch=${2-@}

# if branch points to commit (both are same), then return commit
if [ $commit == $(git rev-parse $branch) ]; then
	git log -1 $format $commit
	exit
fi

# if commit is a merge commit on first-parent path of branch,
# then return commit
# if commit is a NON-merge commit on first-parent path of branch,
# then return branch as it's either a ff merge or commit is only on branch
# and there is not a good way to figure out the right commit
if [ $(git rev-list --first-parent $branch | grep $commit | wc -l) -eq 1 ]; then
	if [ $(git show -s --format="%p" $commit | wc -w) -gt 1 ]; then
		# if commit is a merge commit
		git log -1 $format $commit
	else
		# if commit is a NON-merge commit
		echo 1>&2 ""
		echo 1>&2 "error: returning the branch commit (ff merge or commit only on branch)"
		echo 1>&2 ""
		git log -1 $format $branch
	fi
	exit
fi

# 1st common commit from bottom of first-parent and ancestry-path
merge=$(grep -f \
	<(git rev-list --first-parent  $commit..$branch) \
	<(git rev-list --ancestry-path $commit..$branch) \
		| tail -1)
if [ ! -z $merge ]; then
	git log -1 $format $merge
	exit
fi

# merge commit not found
echo 1>&2 "fatal: no merge commit found"
exit 1
