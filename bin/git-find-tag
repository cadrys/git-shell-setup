#!/bin/sh

#usage: git find-tag [-s | --short] [-l | --long]
#           <commit>
#           [[(-b | --branch)] <branch>]
#           [(-p | --pattern) <tag-pattern>]
#
# Find the tag when a given commit was merged into current or
# given branch.

# See http://stackoverflow.com/questions/43991602/list-tags-in-git-repo-sorted-by-how-they-appear-in-graph
#
# "Using merge commits to represent the last deployed version of
# production code - Thatâ€™s an antipattern. Use tags." VonC
#
# See http://endoflineblog.com/gitflow-considered-harmful
# See http://stackoverflow.com/questions/6905557/git-workflow-clarification-and-avoiding-antipatterns
#
# $ git find-tag 2d4ec14 dev "v.\..$"
# 5f58726 (dev, tag: v1.0)
#
# $ git find-tag 2d4ec14 dev "v.+beta"
# 436d6da (tag: v1.0-beta)
#
#
# *   5f58726 (8 days ago) (dev, tag: v1.0)
# |\    Merge branch 'hooks' into dev
# | * 436d6da (10 days ago) (tag: v1.0-beta)
# | |   semver: Add instructions to commit message
# | * 2d4ec14 (9 days ago)
# |/    prepare-commit-msg: Use variable for $1 arg
# *   845ff28 (10 days ago)
# |\    Merge branch 'merge-drivers' into dev
#

pattern="."
while true; do
	case "$1" in
		-h ) print-file-comments "$0"; exit ;;
		-p | --pattern )
			pattern="$2"; shift 2 ;;
		-b | --branch )
			branch="$2"; shift 2 ;;
		-s | --short)
			formatOption="short"; shift ;;
		-l | --long )
			formatOption="long"; shift ;;
		-- ) shift; break ;;
		-* )
			if [ ! -z "$1" ]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
		* )
			if [[ -z "$commit" ]]; then
				if [[ -z "$1" ]]; then
					break
				fi
				commit="$1"; shift; continue
			fi
			if [[ -z "$branch" ]]; then
				if [[ -z "$1" ]]; then
					break
				fi
				branch="$1"; shift; continue
			fi
			if [[ ! -z "$1" ]]; then
				echo 1>&2 "fatal: unknown option $1"
				exit 1
			fi
			break ;;
	esac
done

if [[ -z "$commit" ]]; then
	echo 1>&2 "fatal: commit is required"
	exit 1
fi
commit=$(git rev-parse $commit)

# if branch points to commit (both are same), then look at commit parent
if [[ $commit == $(git rev-parse $branch) ]]; then
	commit="$commit~"
fi

if [[ "$formatOption" == "short" ]]; then
	format="--pretty=format:%h"
fi
if [[ "$formatOption" == "long" ]]; then
	format="--pretty=format:%H"
fi

# tags between branch and commit sorted as in graph following a pattern
tags=$(
	git log --decorate --simplify-by-decoration --ancestry-path \
		--pretty="format:%D" $commit..$branch \
	| sed 's/, /\n/g' \
	| grep '^tag: ' \
	| sed 's/tag: //' \
	| egrep "$pattern"
)

if [[ -z "$formatOption" ]]; then
	if [[ ! -z "$tags" ]]; then
		echo "tags:"
		for tag in $tags; do
			echo "  $tag"
		done
		echo ""
	fi
fi

tag=$(echo "$tags" | tail -1)
if [[ ! -z "$tag" ]]; then
	git log -1 $format "$tag"
	exit
fi

# tag not found
echo 1>&2 "fatal: no tag found"
exit 1
