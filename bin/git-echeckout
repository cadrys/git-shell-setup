#!/bin/sh

#usage: git echeckout <branch>
#
# Fuzzy checkout using a partial branch name.

if [[ "$1" == "-h" ]]; then print-file-comments "$0"; exit; fi

# short-circuit to checkout
if [ $# -gt 1 ] || [ "$1" == "." ] || [ "$1" == "-" ] || [[ "$1" == *":"* ]]; then
	git checkout "$@"
	exit
fi
# die if empty arg
if [ -z "$1" ]; then
	echo 1>&2 "fatal: branch required"
	exit 1
fi
# get tracking branches
trackingBranches=$(git for-each-ref --format='%(upstream:short)' refs/heads \
	| sed '/^$/d' \
	| sed 's,$,$,' \
	| sed 's,^,^,')
# grep for all branches except current, tracking branches
branches=($(
	git branch -a \
		| grep -v "^\\*" \
		| cut -c3- \
		| grep -v "\->" \
		| sed 's,^remotes/,,' \
		| egrep -v "$trackingBranches" \
		| grep "$1"
		))
# die if no branches matched
if [ ${#branches[@]} -eq 0 ]; then
	echo 1>&2 "fatal: no branch matched"
	exit 1
fi
remote=$(git remote | head -1)
# die if 2+ branches matched
if [ ${#branches[@]} -gt 1 ]; then
	# checkout if only one local branch matched
	localBranches=($(
		printf -- '%s\n' "${branches[@]}" \
			| egrep -v "^$remote"))
	if [ ${#localBranches[@]} -ne 1 ]; then
		echo 1>&2 "fatal: multiple branches matched"
		for branch in ${branches[@]}; do
			echo 1>&2 -e '  '$branch
		done
		exit 1
	fi
fi
# checkout local or remote branch
branch=${branches[0]}
if egrep -q "^$remote" <<< "$branch"; then
	command="git checkout -t $branch"
	echo -e "${White}$command${None}"
	$command
else
	command="git checkout $branch"
	echo -e "${White}$command${None}"
	$command
fi
