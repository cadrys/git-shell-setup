#!/bin/sh

#usage:
#   foxtrot-merge-detector [<branch>]
#
# If foxtrot merge detected for branch (current branch if no branch),
# exit with 1.

# foxtrot merges:
# See http://bit-booster.blogspot.cz/2016/02/no-foxtrots-allowed.html
# https://stackoverflow.com/questions/35962754/git-how-can-i-prevent-foxtrot-merges-in-my-master-branch

branch="$1"
if [[ -z "$branch" ]]; then
	branch=$(git branch-name HEAD 2>/dev/null)
	# detached head, exit
	if [[ -z "$branch" ]]; then
		exit 0
	fi
fi

if git branch-exists "$branch"; then
	# branch to remote ref, dev:dev
	# no remote tracking branch, exit
	if ! git cat-file -e "$branch"@{u} 2>/dev/null; then
		exit 0
	fi
	remoteBranch=$(git branch-name "$branch"@{u} 2>/dev/null)
else
	# commit to remote ref, head:dev
	remoteBranch="$2"
	if [[ -z "$remoteBranch" ]]; then
		echo 1>&2 "fatal: remote branch is required"
		exit 2
	fi
	# no remote tracking branch, exit
	if ! git cat-file -e "$remoteBranch" 2>/dev/null; then
		exit 0
	fi
fi

# branch commit does not cover remote branch commit, exit
if ! $(git merge-base --is-ancestor $remoteBranch $branch); then
	exit 0
fi
remoteBranchCommit=$(git rev-parse $remoteBranch)
# branch commit is same as remote branch commit, exit
if [[ $(git rev-parse $branch) == $remoteBranchCommit ]]; then
	exit 0
fi
# remote branch commit is first-parent of branch, exit
if [[ $(git log --first-parent --pretty='%P' $remoteBranchCommit..$branch | \
	cut -d' ' -f1 | \
	grep $remoteBranchCommit | wc -l) -eq 1 ]]; then
	exit 0
fi
# foxtrot merge detected if here
exit 1
